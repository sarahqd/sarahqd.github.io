[
  
  {
    "date": "2024-02-18 00:00:00 +0800",
    "title": "How to use node-ipc to implement server-client mode",
    "content": "Here we’ll talk about the implementation of node-ipc module, and how we use it to build a server-client with interval communication.What’s node-ipcnode-ipc is a nodejs package which is used to communicate between server and client process asynchronously.  Based on the Unix/Windows sockets, node-ipc doesn’t transfer information with real web sockets, which consumes more time than platform sockets.Install node-ipcUse npm to install node-ipc packagenpm install node-ipcImport node-ipcImport node-ipc module with require command. Be careful with .default. The first time I missed the word, and I got weird errors, such as ipc.serve is not a function.const ipc = require(&#39;node-ipc&#39;).default;Client-server appThe client-server app we’ll build have several items including:  Client connects to server once the client starts  Client sends a message to server, then server responses to it every 1 second  Server sends a message to the client only when client is connected  Client disconnects the server immediatelyCode below runs on Linux platform. You need to change the path for Windows/MacOS.//server.jsconst ipc = require(&#39;node-ipc&#39;).default;let is_registered = falseasync function interval(cb){    setInterval(() =&amp;gt; {        let err = false        if(!is_registered){            console.log(`there is no client`)            err = true        }        cb(err, &#39;hello client&#39;)    }, 1000)}// create an IPC server with filename &#39;ipcServer&#39;ipc.serve(&#39;/home/sarah/Documents/ipcServer&#39;, () =&amp;gt; {    ipc.server.on(&#39;connect&#39;, (socket)=&amp;gt;{        is_registered = true        console.log(`connect:is_registered:${is_registered}`)    })    // listen for messages from clients    ipc.server.on(&#39;message&#39;, (data, socket) =&amp;gt; {        console.log(`received a message from client: ${data}`);        // send a message to the client        interval((err, msg)=&amp;gt;{            if(!err){                ipc.server.emit(socket, &#39;message&#39;, msg);            }        })    })    // Listen for the socket.disconnected event    ipc.server.on(&#39;socket.disconnected&#39;, (socket, destroyedSocketID) =&amp;gt; {        is_registered = false        console.log(`disconnect:is_registered:${is_registered}`)        console.log(`Socket ${destroyedSocketID} disconnected from the server`)    })})// start the IPC serveripc.server.start();process.on(&#39;uncaughtException&#39;, async err =&amp;gt; {    console.log(`uncaught exception: ${err}`);})process.on(&#39;exit&#39;, (err) =&amp;gt; {    console.log(&#39;process will exit&#39;)    ipc.server.stop()    process.exit(1)})//client.jsconst ipc = require(&#39;node-ipc&#39;).default;// connect to an IPC server with id &#39;server&#39;ipc.connectTo(&#39;ipcServer&#39;, &#39;/home/sarah/Documents/ipcServer&#39;, () =&amp;gt; {    // listen for the disconnect event    ipc.of.ipcServer.on(&#39;connect&#39;, () =&amp;gt; {        console.log(&#39;server connected&#39;);    })    // send a message to the server    ipc.of.ipcServer.emit(&#39;message&#39;, &#39;hello server&#39;);    //   receive a message from the server    ipc.of.ipcServer.on(&#39;message&#39;, (data) =&amp;gt; {    console.log(`received a message from server: ${data}`);    })    // listen for the disconnect event    ipc.of.ipcServer.on(&#39;disconnect&#39;, () =&amp;gt; {        // disconnect from the socket        ipc.disconnect(&#39;ipcServer&#39;);        // do any other actions        console.log(&#39;server disconnected&#39;);    })})Open two terminals in the vscode,  and run server.js and client.js alternatively. Then client sends a message to server,  after which server begins to send a message to client every 1 second. When client crashes, the server stops dispatching messages. Once the client connects to the server, the server restarts sending messages again.It must be noticed that the server or the client may miss the messages sent to them. The server or the client emits a message and returns immediately for other operations. It’s another thing to receive the message for the receiver.Also, setInterval is not a common operation but here the example just targets a continuous communication between a server and a client.Server terminal output:starting server on  /home/sarah/Documents/ipcServer starting TLS server falsestarting server as Unix || Windows Socketsocket connection to server detectedconnect:is_registered:truereceived event of :  message hello serverreceived a message from client: hello serverdispatching event to socket  :  message hello clientdispatching event to socket  :  message hello clientdispatching event to socket  :  message hello clientdispatching event to socket  :  message hello clientsocket disconnected falsedisconnect:is_registered:falseSocket false disconnected from the serverthere is no clientthere is no clientthere is no clientthere is no clientthere is no clientsocket connection to server detectedconnect:is_registered:truereceived event of :  message hello serverreceived a message from client: hello serverdispatching event to socket  :  message hello clientdispatching event to socket  :  message hello clientdispatching event to socket  :  message hello client...Client terminal output:requested connection to  ipcServer /home/sarah/Documents/ipcServerConnecting client on Unix Socket : /home/sarah/Documents/ipcServerdispatching event to  ipcServer /home/sarah/Documents/ipcServer  :  message , hello serverserver connectedretrying resetreceived eventsdetected event message hello clientreceived a message from server: hello clientreceived eventsdetected event message hello clientreceived a message from server: hello clientreceived eventsdetected event message hello clientreceived a message from server: hello client...",
    "tags": ["nodejs","javascript","ipc"],
    "categories": [],
    "url": "/2024/02/18/What's-node-ipc-and-how-to-use-it.html",
    "slug": "What's-node-ipc-and-how-to-use-it"
  }
  , 
  
  {
    "date": "2024-01-23 00:00:00 +0800",
    "title": "When A C++ engineer begins to write javascript",
    "content": "One day, there was a task in need of a small javascript function in my work, and I decided to do it myself. I thought if I could write in one kind of coding language then I could manage to use another one(It sounds like if a person could speak Chinese, then he must speak English easily. It’s funny. But the javascript code I wrote works ok, even though it looks more c++ style. Quite C++ style javascript code.function getString(){    if(...){        return str_string    }else{        return false    }}async function handleString(str_string){    let string = getString()    if(string == false){        ...    }else{        ...    }}Then I tried to change it to be more native javascript style.async function getString(cb){    let err = false    if(...){        cb(!err, str_string)    }else{        cb(err)    }}async function handleString(){    let str_string = &#39;&#39;    await getString( (err, string) =&amp;gt; {        if(err){            console.log(&#39;Failed to get string&#39;)            str_string = &quot;&quot;        }else{            str_string = string    })}I felt more comfortable with asynchronous code.  At the same time, I got the significance of await, for I got trapped into the callback as well.  Take code below for example.async function add(int_num, cb){    let err = false    if(...){        cb(!err, int_num + 1)    }else{        cb(err)    }}async function Iterate(int_begin){    add(int_begin, (err, int_add) =&amp;gt; {        if(!err){            int_begin = int_add + int_begin         }        //call main function in the callback of &#39;add&#39;        if(int_begin &amp;lt; 100){            Iterate(int_begin)         }    })}It looks similar to the c++ iteration but more difficult to understand.  With await, we could simplify the code by doing with it synchronously. That looks better and simpler now.async function add(int_num, cb){    let err = false    if(...){        cb(!err, int_num + 1)    }else{        cb(err)    }}async function Iterate(int_begin){    while (int_begin &amp;lt; 100) {        //wait until         await add(int_begin, (err, int_add) =&amp;gt; {            if(!err){                int_begin = int_add + int_begin             }        })    }}",
    "tags": ["javascript","software"],
    "categories": [],
    "url": "/2024/01/23/A-C++-engineer-begins-to-write-javascript.html",
    "slug": "A-C++-engineer-begins-to-write-javascript"
  }
  
  
]
